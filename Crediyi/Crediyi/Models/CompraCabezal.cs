//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crediyi.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class CompraCabezal
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public CompraCabezal()
        {
            this.LineaCabezal = new HashSet<LineaCabezal>();
        }

        public string Serie { get; set; }
        public int Numero { get; set; }

        [DisplayName("ID Cliente")]
        public int IdCliente { get; set; }
        public System.DateTime Fecha { get; set; }

        public virtual Clientes Clientes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<LineaCabezal> LineaCabezal { get; set; }

        
        private int impTotal;

        [DisplayName("Importe Total")]
        public int ImpTotal
        {
            get { return ImporteTotal(); }
        }

        public int ImporteTotal()
        {
            foreach (LineaCabezal item in LineaCabezal)
            {
                impTotal += item.Cantidad * (Convert.ToInt32(item.Productos.Importe));              
            }

            return impTotal;
        }


        //validar Contenido de Objeto
        public void Validar()
        {

            if (this.Serie.Trim().Length < 1 && this.Serie.Trim().Length > 4)
                throw new Exception("La Serie debe contener entre 1 y 3 caracteres máximo.");
            if (this.Numero <= 0)
                throw new Exception("El Número debe ser positivo");
            if (this.Clientes == null)
                throw new Exception("Debe selecionar un cliente");

        }


    }

}          
        


 

