//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crediyi.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Text.RegularExpressions;

    public partial class Clientes
    {
        [DisplayName("ID Cliente")]
        public int IdCliente { get; set; }

        [DisplayName("Tipo Documento")]
        public int IdTipoDoc { get; set; }
        [DisplayName("N° Documento")]
        public int NumDoc { get; set; }
        public string Nombre { get; set; }
        public string Email { get; set; }
        [DisplayName("Teléfono")]
        public string Tel { get; set; }
    
        public virtual TiposDocumentos TiposDocumentos { get; set; }


        //validar Contenido de Objeto
        public void Validar()
        {
            Regex rege = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
            Match match = rege.Match(this.Email);
            Int32 telefono;


            if (this.IdCliente <= 0)
                throw new Exception("El Id de Cliente debe ser positivo");
            // debe existir en tipodoc
            if (this.TiposDocumentos == null)
                throw new Exception("Debe seleccionar un Tipo de documento.");
            if (this.NumDoc <= 0)
                throw new Exception("El Número de documento debe ser positivo");
            if (this.Nombre.Trim().Length < 6 && this.Nombre.Trim().Length > 30)
                throw new Exception("El nombre debe contener al menos 6 caracteres y máximo 30.");
            if (match.Success)
                throw new Exception("Formato de Email incorrecto.");
            if (!(match.Length < 10 && match.Length > 50))
                throw new Exception("El Email debe contener al menos 10 caracteres y máximo 50.");
            if (Tel.Trim().Length != 9)
                throw new Exception("Debe ingresar un número de teléfono de 9 digitos");
            try
            {
                telefono = Convert.ToInt32(Tel);
            }
            catch
            {
                throw new Exception("El teléfono solo puede tener valores numéricos.");
            }
            if (telefono < 0)
                throw new Exception("El telefono solo puede tener un numero positivo");
        }


    }
}
